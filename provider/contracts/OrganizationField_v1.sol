pragma solidity ^0.4.8;

import './Organization.sol';
import '../../gmo/contracts/VersionField.sol';

contract OrganizationField_v1 is VersionField, Organization {
    bytes32 rootId;

    struct Field {
        bool isCreated;
        bool isRemoved;
        mapping (address => mapping(bytes32 => bool)) allowCnsContracts; //address=>(contractname=>isAllowGroup);
        bytes32 name;
        bytes32 controllerGroupId;
        bytes32 memberGroupId;
    }

    mapping(bytes32 => Field) public fields; // generated by admin client

    function OrganizationField_v1(ContractNameService _cns) VersionField(_cns, CONTRACT_NAME) {}

    /* OVERRIDE */
    function existIdAtCurrentVersion(bytes32 _id) constant returns (bool) {
        return fields[_id].isCreated;
    }

    /* OVERRIDE */
    function setDefault(bytes32 _id) private {
        fields[_id] = Field({isCreated:true, isRemoved:false, name: 0, controllerGroupId:0, memberGroupId:0});
    }

    function allowCnsContracts(bytes32 _id, address _cns, bytes32 _contractName) constant returns (bool) {
        return fields[_id].allowCnsContracts[_cns][_contractName];
    }

    function setAllowCnsContract(bytes32 _id, address _cns, bytes32 _contractName, bool _isAdded) onlyByNextVersionOrVersionLogic {
        prepare(_id);
        fields[_id].allowCnsContracts[_cns][_contractName] = _isAdded;
    }

    function isAllowCnsContract(address _cns, bytes32 _contractName, bytes32 _id) constant returns (bool) {
        if (shouldReturnDefault(_id)) return false;
        return fields[_id].allowCnsContracts[_cns][_contractName];
    }

    /* ----------- create / remove Organizations----------------- */

    function create(bytes32 _id, bytes32 _name, bytes32 _controllerGroupId, bytes32 _memberGroupId) onlyByNextVersionOrVersionLogic {
        if(exist(_id)) throw;
        fields[_id] = Field({isCreated:true, isRemoved: false, name:_name, controllerGroupId:_controllerGroupId, memberGroupId:_memberGroupId});
    }

    function remove(bytes32 _id) onlyByNextVersionOrVersionLogic {
        if(!exist(_id)) throw;
        fields[_id].isRemoved = true;
    }

    /* ----------- getters and setters----------------- */

    function getIsCreated(bytes32 _id) constant returns (bool) {
        if(shouldReturnDefault(_id)) return true;
        return fields[_id].isCreated;
    }

    function getIsRemoved(bytes32 _id) constant returns (bool) {
        if(shouldReturnDefault(_id)) return false;
        return fields[_id].isRemoved;
    }

    function getName(bytes32 _id) constant returns (bytes32) {
        if(shouldReturnDefault(_id)) return 0;
        return fields[_id].name;
    }

    function getControllerGroupId(bytes32 _id) constant returns (bytes32) {
        if(shouldReturnDefault(_id)) return 0;
        return fields[_id].controllerGroupId;
    }

    function getMemberGroupId(bytes32 _id) constant returns (bytes32) {
        if(shouldReturnDefault(_id)) return 0;
        return fields[_id].memberGroupId;
    }

    function setIsCreated(bytes32 _id, bool _status) onlyByNextVersionOrVersionLogic {
        prepare(_id);
        fields[_id].isCreated = _status;
    }

    function setIsRemoved(bytes32 _id, bool _status) onlyByNextVersionOrVersionLogic {
        prepare(_id);
        fields[_id].isRemoved = _status;
    }

    function setName(bytes32 _id, bytes32 _name) onlyByNextVersionOrVersionLogic {
        prepare(_id);
        fields[_id].name = _name;
    }

     function setControllerGroupId(bytes32 _id, bytes32 _groupId) onlyByNextVersionOrVersionLogic {
         prepare(_id);
         fields[_id].controllerGroupId = _groupId;
     }

     function setMemberGroupId(bytes32 _id, bytes32 _groupId) onlyByNextVersionOrVersionLogic {
         prepare(_id);
         fields[_id].memberGroupId = _groupId;
     }
}
